using Content.Client.UserInterface.Controls;
using Content.Shared.PsycUpdate;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.PsycUpdate
{
    [GenerateTypedNameReferences]
    public sealed partial class UpdateCristalMenu : FancyWindow
    {
        [Dependency] private readonly IEntitySystemManager _sysMan = default!;
        private readonly SpriteSystem _spriteSystem;

        private readonly UpdateCristalBoundUserInterface _owner;

        public UpdateCristalMenu(UpdateCristalBoundUserInterface owner)
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);
            _spriteSystem = _sysMan.GetEntitySystem<SpriteSystem>();

            _owner = owner;

            ApproveButton.OnButtonDown += (args) =>
            {
                _owner.SendApprove();
            };
        }

        public void UpdateState(UpdateCristalBoundUserInterfaceState state)
        {
            SetsGrid.RemoveAllChildren();
            int count = 0;
            int selectedNumber = 0;
            foreach (var set in state.Sets)
            {
                var child = new UpdateCristalSet(set.Value, _spriteSystem); // Usando o nome correto UpdateCristalSet

                child.SetButton.OnButtonDown += (args) =>
                {
                    _owner.SendChangeSelected(set.Key);
                };

                SetsGrid.AddChild(child);

                count++;

                if (set.Value.Selected)
                    selectedNumber++;
            }

            SelectedSets.Text = Loc.GetString("Update-Cristal-window-selected", ("selectedCount", selectedNumber), ("maxCount", state.MaxSelectedSets));
            ApproveButton.Disabled = selectedNumber == state.MaxSelectedSets ? false : true;
        }
    }
}
